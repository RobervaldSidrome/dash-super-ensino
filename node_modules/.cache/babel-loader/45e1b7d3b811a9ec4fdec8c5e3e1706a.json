{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectReferenceElementsDomain = void 0;\n\nvar _ReferenceDot = _interopRequireDefault(require(\"../cartesian/ReferenceDot\"));\n\nvar _ReferenceLine = _interopRequireDefault(require(\"../cartesian/ReferenceLine\"));\n\nvar _ReferenceArea = _interopRequireDefault(require(\"../cartesian/ReferenceArea\"));\n\nvar _IfOverflowMatches = require(\"./IfOverflowMatches\");\n\nvar _ReactUtils = require(\"./ReactUtils\");\n\nvar _DataUtils = require(\"./DataUtils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar detectReferenceElementsDomain = function detectReferenceElementsDomain(children, domain, axisId, axisType, specifiedTicks) {\n  var lines = (0, _ReactUtils.findAllByType)(children, _ReferenceLine[\"default\"]);\n  var dots = (0, _ReactUtils.findAllByType)(children, _ReferenceDot[\"default\"]);\n  var elements = lines.concat(dots);\n  var areas = (0, _ReactUtils.findAllByType)(children, _ReferenceArea[\"default\"]);\n  var idKey = \"\".concat(axisType, \"Id\");\n  var valueKey = axisType[0];\n  var finalDomain = domain;\n\n  if (elements.length) {\n    finalDomain = elements.reduce(function (result, el) {\n      if (el.props[idKey] === axisId && (0, _IfOverflowMatches.ifOverflowMatches)(el.props, 'extendDomain') && (0, _DataUtils.isNumber)(el.props[valueKey])) {\n        var value = el.props[valueKey];\n        return [Math.min(result[0], value), Math.max(result[1], value)];\n      }\n\n      return result;\n    }, finalDomain);\n  }\n\n  if (areas.length) {\n    var key1 = \"\".concat(valueKey, \"1\");\n    var key2 = \"\".concat(valueKey, \"2\");\n    finalDomain = areas.reduce(function (result, el) {\n      if (el.props[idKey] === axisId && (0, _IfOverflowMatches.ifOverflowMatches)(el.props, 'extendDomain') && (0, _DataUtils.isNumber)(el.props[key1]) && (0, _DataUtils.isNumber)(el.props[key2])) {\n        var value1 = el.props[key1];\n        var value2 = el.props[key2];\n        return [Math.min(result[0], value1, value2), Math.max(result[1], value1, value2)];\n      }\n\n      return result;\n    }, finalDomain);\n  }\n\n  if (specifiedTicks && specifiedTicks.length) {\n    finalDomain = specifiedTicks.reduce(function (result, tick) {\n      if ((0, _DataUtils.isNumber)(tick)) {\n        return [Math.min(result[0], tick), Math.max(result[1], tick)];\n      }\n\n      return result;\n    }, finalDomain);\n  }\n\n  return finalDomain;\n};\n\nexports.detectReferenceElementsDomain = detectReferenceElementsDomain;","map":null,"metadata":{},"sourceType":"script"}